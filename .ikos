export IKOS_HOME="${HOME}/ikos"
export IKOS_SOFTWARE="${IKOS_HOME}/software"
if [ -f "${IKOS_SOFTWARE}/.ikos_profile" ]; then
    source "${IKOS_SOFTWARE}/.ikos_profile"
fi

# See https://ikoshq.phacility.com/w/py3-setup/
export LDFLAGS="-L$(brew --prefix openssl)/lib"
export CFLAGS="-I$(brew --prefix openssl)/lib"
export LDFLAGS="${LDFLAGS} -L/usr/local/opt/zlib/lib"
export CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/zlib/include"
export PKG_CONFIG_PATH="${PKG_CONFIG_PATH} /usr/local/opt/zlib/lib/pkgconfig"

export IKOS_SKIP_PYENV_INIT="true"

if [ -d "/usr/local/arcanist/arcanist/bin" ]; then
    PATH="${PATH}:/usr/local/arcanist/arcanist/bin"
    arc set-config editor "\"${HOME}/bin/subl\" -w -n" > /dev/null
fi

export WORKON_HOME=~/VENVS
source $HOME/Library/Python/2.7/bin/virtualenvwrapper.sh
export PATH="${PATH}:$HOME/Library/Python/2.7/bin"
mkdir -p $WORKON_HOME

function _ks_component() {
    component_name=$1
    shift
    component_path=$1
    shift
    deploy_name=$1
    shift
    usage="usage: ks $component_name [build|code|test|stage|deploy]"

    if [ $# -eq 0 ]; then
        cd "${component_path}"
        return 0
    fi

    subcommand=$1
    shift

    if [ $# -gt 0 ]; then
        >&2 echo "$usage"
        return 2
    fi

    case "$subcommand" in
    'build' | 'b')
        (cd "${component_path}" && ./build.sh)
        return $?
        ;;
    'code' | 'c')
        code "${component_path}"
        return $?
        ;;
    'test' | 't')
        (cd "${component_path}" && ./run_tests.sh)
        return $?
        ;;
    'stage' | 's')
        ikos-deploy deploy "${deploy_name}" staging
        return $?
        ;;
    'deploy' | 'd')
        ikos-deploy deploy "${deploy_name}" prod
        return $?
        ;;
    *)
        >&2 echo "$usage"
        return 2
    esac
}

function _ks_migrate () {
    usage="usage: ks migrate [undo|recent|current]"

    if [ $# -eq 0 ]; then
        (ks dal && alembic upgrade head)
        return 0
    fi

    subcommand=$1
    shift

    if [ $# -gt 0 ]; then
        >&2 echo "$usage"
        return 2
    fi

    case "$subcommand" in
    "undo")
        (ks dal && alembic downgrade -1)
        return $?
        ;;
    "recent")
        (ks dal && alembic history | head)
        return $?
        ;;
    "current")
        (ks dal && alembic current)
        return $?
        ;;
    *)
        >&2 echo "$usage"
        return 2
    esac
}

function ks () {
    usage="usage: ks (api|dal|maestro|migrate|mysql|ops|py2|py3|software)"

    if [ $# -eq 0 ]; then
        cd "${IKOS_HOME}";
        return 0;
    fi

    subcommand=$1;
    shift;

    case $subcommand in
    "api")
        _ks_component api "${IKOS_HOME}/software/api_public/api" api_public $@
        return $?
        ;;
    "dal")
        _ks_component dal "${IKOS_HOME}/software/ikosdal" NOT_DEPLOYABLE $@
        return $?
        ;;
    "dispatchers")
        _ks_component dispatchers "${IKOS_HOME}/software/ikos_tasks/dispatchers" dispatchers $@
        return $?
        ;;
    "distributor")
        _ks_component distributor "${IKOS_HOME}/software/showtime/distributor" distributor $@
        return $?
        ;;
    "emailreceiver")
        _ks_component emailreceiver "${IKOS_HOME}/software/mailroom/receivers/emailreceiver" emailreceiver $@
        return $?
        ;;
    "httpreceiver")
        _ks_component httpreceiver "${IKOS_HOME}/software/mailroom/receivers/httpreceiver" httpreceiver $@
        return $?
        ;;
    "jopling")
        _ks_component jopling "${IKOS_HOME}/software/jopling" NOT_DEPLOYABLE $@
        return $?
        ;;
    "maestro")
        _ks_component maestro "${IKOS_HOME}/software/maestro" maestro $@
        return $?
        ;;
    "migrate")
        _ks_migrate $@
        return $?
        ;;
    "smsreceiver")
        _ks_component smsreceiver "${IKOS_HOME}/software/mailroom/receivers/smsreceiver" smsreceiver $@
        return $?
        ;;
    "templates")
        _ks_component templates "${IKOS_HOME}/software/ikos_templates" NOT_DEPLOYABLE $@
        return $?
        ;;
    "vendors")
        _ks_component vendors "${IKOS_HOME}/software/vendors" NOT_DEPLOYABLE $@
        return $?
        ;;
    "workers")
        _ks_component workers "${IKOS_HOME}/software/ikos_tasks/workers" workers_remote $@
        return $?
        ;;
    esac

    if [ $# -ne 0 ]; then
        >&2 echo "subarguments are not supported for $subcommand"
        return 2
    fi

    case $subcommand in
    "mysql")
        docker exec -it localdev-mysql mysql -u root -ppassword ikosdev
        ;;
    "ops")
        cd "${IKOS_HOME}/ops"
        ;;
    "py2")
        # ks software
        # ./py2-dev.sh
        pyenv activate ikos2
        ;;
    "py3")
        # ks software
        # ./py3-dev.sh
        pyenv activate ikos3
        ;;
    "software")
        cd "${IKOS_HOME}/software"
        ;;
    *)
        >&2 echo "$usage"
        return 2
        ;;
    esac
}


alias ksack='ack --ignore-dir=tests --ignore-dir=legacy'

# TODO: Autogenerate ksab, ksac, ksas, ksad, etc. etc. etc.
alias ksa='ks api'
alias ksd='ks dal'
alias ksdb='ks mysql'
alias ksdp='ks dispatcher'
alias ksdt='ks distributor'
alias kser='ks emailreceiver'
alias kshr='ks httpreceiver'
alias ksj='ks jopling'
alias ksm="ks maestro"
alias kso="ks ops"
alias kst='ks templates'
alias ksv='ks vendors'
alias ksw='ks workers'
alias kssr='ks smsreceiver'
alias ks2='ks py2'
alias ks3='ks py3'
alias kss='ks software'

function ops_rsync () {
    kso
    for host in staging app1 app2 app3 job1 job2 job3; do
        echo "Syncing $host.meetikos.com..."
        rsync -auv ./ansible/* $host.meetikos.com:/opt/Operations/ansible/;
        echo "Done!"
        echo
    done;

    for host in platform-ci-1 product-ci-1 product-ci-2 product-ci-3; do
        echo "Syncing $host..."
        rsync -auv ./ansible/* $host:/opt/Operations/ansible/;
        echo "Done!"
        echo
    done;
}

# TODO: incorporate ops_rsync into ks
